@page "/viewbooks"
@using BookTradingHub.Domain.Models
@using System.Text.Json
@inject HttpClient httpClient

<PageTitle>Book Rental</PageTitle>

<h1>Create Book Listing</h1>
<input placeholder="Title" @bind="newBook.Title" />
<input placeholder="Author" @bind="newBook.Author" />
<input placeholder="ISBN" @bind="newBook.ISBN" />
<input placeholder="Year" @bind="newBook.Year" />
<button @onclick="async() => await AddBook()">Add Book</button>
<p>@infoMessage</p>

<h1>Book Listings (@books.Count)</h1>

@if (books.Count == 0)
{
    <p>No books listed...</p>
}
else
{
    <ul>
        @foreach (Book book in books)
        {
            <li>
                <input placeholder="Title" @bind="book.Title" @bind:after="async() => await UpdateBook(book)" />
                <input placeholder="Author" @bind="book.Author" @bind:after="async() => await UpdateBook(book)" />
                <input placeholder="ISBN" @bind="book.ISBN" @bind:after="async() => await UpdateBook(book)" />
                <input placeholder="Year" @bind="book.Year" @bind:after="async() => await UpdateBook(book)" />
                <span @onclick="async() => await RemoveBookAsync(book.Id)">
                    <svg width="14" height="14" class="text-danger" fill="currentColor">
                        <use xlink:href="bootstrap-icons.svg#x-square-fill" />
                    </svg>
                </span>
            </li>
        }
    </ul>
}

@code {
    Book newBook = new();
    List<Book> books = new();
    string infoMessage = "";

    protected async override Task OnInitializedAsync()
    {
        await FetchBooksAsync();
    }

    async Task AddBook()
    {
        var response = await httpClient.PostAsJsonAsync("api/books", newBook);
        if (response.IsSuccessStatusCode)
        {
            infoMessage = "Book Listing Created";
            await FetchBooksAsync();
        }
        else
        {
            infoMessage = $"Error creating book listing: {response.StatusCode}, {response.ReasonPhrase}.";
        }
    }

    async Task UpdateBook(Book book)
    {
        await httpClient.PutAsJsonAsync($"api/books/{book.Id}", book);
        await FetchBooksAsync();
    }

    async Task FetchBooksAsync()
    {
        try
        {
            var response = await httpClient.GetStringAsync("api/books");
            var options = new JsonSerializerOptions() { PropertyNameCaseInsensitive = true };
            books = JsonSerializer.Deserialize<List<Book>>(response, options) ?? new();
        }
        catch
        {
            infoMessage = "Error fetching books.";
        }
    }

    async Task RemoveBookAsync(int id)
    {
        await httpClient.DeleteAsync($"api/books?id={id}");
        await FetchBooksAsync();
    }
}

