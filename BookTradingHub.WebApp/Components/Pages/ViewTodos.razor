@page "/viewtodos"
@using BookTradingHub.Domain.Models
@using System.Text.Json
@inject HttpClient httpClient

<PageTitle>Todos</PageTitle>

<h1>Create Todo</h1>
<input @bind="newTodo.Name" />
<input type="date" @bind="newTodo.DueDate" />
<button @onclick="async() => await AddTodo()">Add Todo</button>
<p>@infoMessage</p>

<h1>Todos (@(todos.Count(todo => !todo.IsCompleted)))</h1>


@if (todos.Count == 0)
{
    <p>No todos...</p>
}
else
{
    <ul>
        @foreach (Todo todo in todos)
        {
            <li><input type="checkbox" @bind="todo.IsCompleted" @bind:after="async() => await UpdateTodo(todo)" /> <input @bind="
                    todo.Name" @bind:after="async() => await UpdateTodo(todo)" /> <input type="date"
                    @bind="todo.DueDate" @bind:after="async() => await UpdateTodo(todo)" />
                <span @onclick="async() => await RemoveTodoAsync(todo.Id)">
                    <svg width="14" height="14" class="text-danger" fill="currentColor">
                        <use xlink:href="bootstrap-icons.svg#x-square-fill" />
                    </svg>
                </span>
            </li>
        }
    </ul>
}

@code {
    Todo newTodo = new() { DueDate = DateTime.Now };
    List<Todo> todos = [];
    string infoMessage = "";

    protected async override Task OnInitializedAsync()
    {
        await FetchTodosAsync();
    }

    async Task AddTodo()
    {
        var response = await httpClient.PostAsJsonAsync("api/todos", newTodo);
        if (response.IsSuccessStatusCode)
        {
            infoMessage = "Todo Created";
            await FetchTodosAsync();
        }
        else
        {
            infoMessage = $"Error creating todo: {response.StatusCode}, {response.ReasonPhrase}.";
        }
    }

    async Task UpdateTodo(Todo todo)
    {
        await httpClient.PutAsJsonAsync($"api/todos/{todo.Id}", todo);
        await FetchTodosAsync();
    }

    async Task FetchTodosAsync()
    {
        try
        {
            var response = await httpClient.GetStringAsync("api/todos");
            var options = new JsonSerializerOptions() { PropertyNameCaseInsensitive = true };
            todos = JsonSerializer.Deserialize<List<Todo>>(response, options) ?? [];
        }
        catch
        {

        }
    }

    async Task RemoveTodoAsync(int id)
    {
        await httpClient.DeleteAsync($"api/todos?id={id}");
        await FetchTodosAsync();
    }
}